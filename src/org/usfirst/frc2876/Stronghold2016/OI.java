// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.Stronghold2016;

import org.usfirst.frc2876.Stronghold2016.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton rightBumper;
    public JoystickButton leftBumper;
    public JoystickButton aButton;
    public JoystickButton bButton;
    public JoystickButton xButton;
    public JoystickButton yButton;
    public JoystickButton backButton;
    public JoystickButton startButton;
    public Joystick controller;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        controller = new Joystick(0);
        
        startButton = new JoystickButton(controller, 8);
        startButton.whenPressed(new DriveInArcadeMode());
        backButton = new JoystickButton(controller, 7);
        backButton.whenPressed(new DriveInTankMode());
        yButton = new JoystickButton(controller, 4);
        yButton.whenPressed(new AutoMoveArmToUp());
        xButton = new JoystickButton(controller, 3);
        xButton.whenPressed(new IntakeBall());
        bButton = new JoystickButton(controller, 2);
        bButton.whileHeld(new IntakeIdle());
        aButton = new JoystickButton(controller, 1);
        aButton.whenPressed(new IntakeExpel());
        leftBumper = new JoystickButton(controller, 5);
        leftBumper.whenPressed(new ArmDown());
        rightBumper = new JoystickButton(controller, 6);
        rightBumper.whenPressed(new ArmUp());


        // SmartDashboard Buttons
        SmartDashboard.putData("AutoDriveReach", new AutoDriveReach());
        SmartDashboard.putData("ArmControl", new ArmControl());
        SmartDashboard.putData("ArmDown", new ArmDown());
        SmartDashboard.putData("ArmUp", new ArmUp());
        SmartDashboard.putData("DriveControl", new DriveControl());
        SmartDashboard.putData("DriveFullSpeed", new DriveFullSpeed());
        SmartDashboard.putData("DriveInArcadeMode", new DriveInArcadeMode());
        SmartDashboard.putData("DriveInTankMode", new DriveInTankMode());
        SmartDashboard.putData("DriveSensitiveSpeed", new DriveSensitiveSpeed());
        SmartDashboard.putData("IntakeBall", new IntakeBall());
        SmartDashboard.putData("IntakeBallForce", new IntakeBallForce());
        SmartDashboard.putData("IntakeControl", new IntakeControl());
        SmartDashboard.putData("IntakeExpel", new IntakeExpel());
        SmartDashboard.putData("IntakeGrasp", new IntakeGrasp());
        SmartDashboard.putData("IntakeIdle", new IntakeIdle());
        SmartDashboard.putData("AutoCGReachDefense", new AutoCGReachDefense());
        SmartDashboard.putData("AutoDriveDistance: distance", new AutoDriveDistance(0, 0));
        SmartDashboard.putData("AutoDriveDistance: speed", new AutoDriveDistance(0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getController() {
        return controller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getLeftX() { 
		return controller.getRawAxis(LEFT_X_AXIS);
	}
    
	public double getLeftY() { 
		return controller.getRawAxis(LEFT_Y_AXIS);
	}
	
	
	public double getRightX() { 
		return controller.getRawAxis(RIGHT_X_AXIS);
	}
	
	public double getRightY() { 
		return controller.getRawAxis(RIGHT_Y_AXIS);
	}
	
	
	public double getLeftTrigger() {
		return controller.getRawAxis(LEFT_TRIGGER);
	}
	
	public double getRightTrigger() {
		return controller.getRawAxis(RIGHT_TRIGGER);
	}
	

	public static final int LEFT_X_AXIS = 0,
			LEFT_Y_AXIS = 1,
			LEFT_TRIGGER = 2,
			RIGHT_TRIGGER = 3,
			RIGHT_X_AXIS = 4,
			RIGHT_Y_AXIS = 5,
			DPAD_X_AXIS = 6,
			DPAD_Y_AXIS = 7;
}

