// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.Stronghold2016.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2876.Stronghold2016.Robot;

/**
 *
 */
public class DriveWithJoystick extends Command {
	RobotDrive myRobot;
	Joystick controller;
	double sensitivity, rampConstant;
	Button aButton = new JoystickButton(controller, 1);
	


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithJoystick() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        sensitivity = .65;
        rampConstant = .75;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	aButton.whenPressed(new ToggleTankAndArcade());
    	double leftY = -(rampConstant * Math.pow(controller.getY(), 3) + (1 - rampConstant) * controller.getY()) * sensitivity;
    	if(Robot.driveTrain.getIsTankDrive()) {
    		double rightY = -(rampConstant * Math.pow(controller.getY(), 3) + (1 - rampConstant) * controller.getY()) * sensitivity;
    		myRobot.tankDrive(leftY, rightY, true);
    	} else {
    		double leftX = -(rampConstant * Math.pow(controller.getX(), 3) + (1 - rampConstant)* controller.getX()) * sensitivity;
    		myRobot.arcadeDrive(leftY, leftX, true);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
