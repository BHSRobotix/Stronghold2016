// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.Stronghold2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2876.Stronghold2016.Robot;

/**
 *
 */
public class DriveControl extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	double sensitivity, rampConstant;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveControl() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        rampConstant = .75;
        sensitivity = .65;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.oi.backButton.whenPressed(new DriveInTankMode());
    	Robot.oi.startButton.whenPressed(new DriveInArcadeMode());
    	if ((Robot.oi.controller.getPOV() <= 45 && Robot.oi.controller.getPOV() >= 0) ||
    			Robot.oi.controller.getPOV() >= 315) sensitivity = 1;
    	if (Robot.oi.controller.getPOV() <= 225 && Robot.oi.controller.getPOV() >= 135) sensitivity = .65;
    	double leftY = (rampConstant * Math.pow(Robot.oi.getLeftY(), 3) + 
    			(1 - rampConstant) * Robot.oi.getLeftY()) * sensitivity;
    	if(Robot.driveTrain.getIsTankDrive()) {
    		double rightY = (rampConstant * Math.pow(Robot.oi.getRightY(), 3) + 
    				(1 - rampConstant) * Robot.oi.getRightY()) * sensitivity;
    		Robot.driveTrain.myRobot.tankDrive(-leftY, -rightY, true);
    	} else {
    		double rightX = (rampConstant * Math.pow(Robot.oi.getRightX(), 3) + 
    				(1 - rampConstant)* Robot.oi.getRightX()) * sensitivity;
    		Robot.driveTrain.myRobot.arcadeDrive(-leftY, -rightX, true);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
