// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.Stronghold2016;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.ArrayList;

import org.usfirst.frc2876.Stronghold2016.commands.*;
import org.usfirst.frc2876.Stronghold2016.subsystems.*;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.SPI;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    
//    ArrayList<Command> autoCommands = new ArrayList<Command>();
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Arm arm;
    public static Intake intake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS navX;
    
    public static final boolean IS_PRACTICE_BOT = false;
    
    // NEW STUFF - TEST LATER
//    SendableChooser defenseChooser;
//    SendableChooser distanceChooser;
//    SendableChooser firstTurnChooser;
//    SendableChooser secondTurnChooser;
//    SendableChooser secondDefenseChooser;

//    private int counterForAutoCommands = 0;

    
    SendableChooser autoChooser;

    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        navX = new AHRS(SPI.Port.kMXP);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        arm = new Arm();
        intake = new Intake();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        // NEW STUFF - TEST LATER
//        setupAutoChoosers();
        
        
        setupAuto();

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	driveTrain.setBrakeMode(true);
    	// NEW STUFF - TEST LATER
        // schedule the autonomous command (example)S
//    	autoCommands.add((Command) defenseChooser.getSelected());
//    	autoCommands.add(new AutoDriveTurn((double) firstTurnChooser.getSelected()));
//    	autoCommands.add(new AutoDriveDistance((double) distanceChooser.getSelected(), .8));
//    	autoCommands.add(new AutoDriveTurn((double) firstTurnChooser.getSelected()));
//    	autoCommands.add((Command) secondDefenseChooser.getSelected());
    	
    	autonomousCommand = (Command) autoChooser.getSelected();
    	if (autonomousCommand != null) autonomousCommand.start();
    }
    
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	arm.updateSmartDashboard();
    	driveTrain.updateSmartDashboard();
    	
    	// NEW STUFF - TEST LATER
//    	if(!autoCommands.get(counterForAutoCommands).isRunning() && counterForAutoCommands != autoCommands.size() - 1){
//    		counterForAutoCommands++;
//    		autoCommands.get(counterForAutoCommands).start();
//    	}
    	
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	driveTrain.setBrakeMode(false);
        if (autonomousCommand != null) autonomousCommand.cancel();
    	// NEW STUFF - TEST LATER
//        if (autoCommands.get(counterForAutoCommands) != null) autoCommands.get(counterForAutoCommands).cancel();
        driveTrain.resetEncoders();
        Command pollXBox = new PollXBox();
        pollXBox.start();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	arm.updateSmartDashboard();
    	driveTrain.updateSmartDashboard();
    	intake.updateSmartDashboard();
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	arm.updateSmartDashboard();
    	driveTrain.updateSmartDashboard();
    	intake.updateSmartDashboard();
        LiveWindow.run();
    }
    

    public void setupAuto(){
    	autoChooser = new SendableChooser();
    	
    	autoChooser.addDefault("Cross Low Bar", new AutoCGCrossLowBar());
    	autoChooser.addObject("Cross Rough Terrain", new AutoCGCrossRoughTerrain());
    	autoChooser.addObject("Cross Moat", new AutoCGCrossMoat());
    	autoChooser.addObject("Cross Ramparts", new AutoCGCrossRamparts());
    	autoChooser.addObject("Cross Rock Wall", new AutoCGCrossRockWall());
    	autoChooser.addObject("Do Nothing", new AutoDoNothing());
    	
    	SmartDashboard.putData("Auto Choice", autoChooser);

    }
    
	// NEW STUFF - TEST LATER
//    public void setupAutoChoosers(){
//    	defenseChooser = new SendableChooser();
//    	
//    	defenseChooser.addDefault("Cross Low Bar", new AutoCGCrossLowBar());
//    	defenseChooser.addObject("Cross Rough Terrain", new AutoCGCrossRoughTerrain());
//    	defenseChooser.addObject("Cross Moat", new AutoCGCrossMoat());
//    	defenseChooser.addObject("Cross Ramparts", new AutoCGCrossRamparts());
//    	defenseChooser.addObject("Cross Rock Wall", new AutoCGCrossRockWall());
//    	defenseChooser.addObject("Do Nothing", new AutoDoNothing());
//    	
//    	SmartDashboard.putData("Defense Choice", defenseChooser);
//    	
//    	firstTurnChooser = new SendableChooser();
//    	
//    	firstTurnChooser.addDefault("Face Us", 0.0);
//    	firstTurnChooser.addObject("Face Left", 90.0);
//    	firstTurnChooser.addObject("Face Right", 270.0);
//    	firstTurnChooser.addObject("Face Opponent", 180.0);
//    	
//    	SmartDashboard.putData("Turn Choice", firstTurnChooser);
//    	
//    	double distanceBetweenDefenses = 48.0;
//    	
//    	distanceChooser = new SendableChooser();
//    	
//    	distanceChooser.addDefault("0", 0 * distanceBetweenDefenses);
//    	distanceChooser.addObject("1", 1 * distanceBetweenDefenses);
//    	distanceChooser.addObject("2", 2 * distanceBetweenDefenses);
//    	distanceChooser.addObject("3", 3 * distanceBetweenDefenses);
//    	distanceChooser.addObject("4", 4 * distanceBetweenDefenses);
//    	
//    	SmartDashboard.putData("Distance Choice", distanceChooser);
//    	
//    	secondDefenseChooser = new SendableChooser();
//    	
//    	secondDefenseChooser.addDefault("Cross Low Bar", new AutoCGCrossLowBar());
//    	secondDefenseChooser.addObject("Cross Rough Terrain", new AutoCGCrossRoughTerrain());
//    	secondDefenseChooser.addObject("Cross Moat", new AutoCGCrossMoat());
//    	secondDefenseChooser.addObject("Cross Ramparts", new AutoCGCrossRamparts());
//    	secondDefenseChooser.addObject("Cross Rock Wall", new AutoCGCrossRockWall());
//    	secondDefenseChooser.addObject("Cross Sally Port", new AutoCGReverseSallyPort());
//    	secondDefenseChooser.addObject("Cross Drawbridge", new AutoCGReverseSallyPort());
//    	secondDefenseChooser.addObject("Do Nothing", new AutoDoNothing());
//    	
//    	SmartDashboard.putData("Second Defense Choice", secondDefenseChooser);
//
//    	secondTurnChooser = new SendableChooser();
//    	
//    	secondTurnChooser.addDefault("Face Us", 0.0);
//    	secondTurnChooser.addObject("Face Left", 90.0);
//    	secondTurnChooser.addObject("Face Right", 270.0);
//    	secondTurnChooser.addObject("Face Opponent", 180.0);
//    	
//    	SmartDashboard.putData("Second Turn Choice", secondTurnChooser);
//    	
//    	
//    }
}
